from fiber import sleep
from random.pseudo import randint
from sdl import Color
from sdl import Font
from sdl import KeyCode
from sdl import KeyDownEvent
from sdl import KeySym
from sdl import Music
from sdl import QuitEvent
from sdl import Rect
from sdl import Renderer
from sdl import Surface
from sdl import Texture
from sdl import Wav
from sdl import Window
from sdl import create_rgb_surface
from sdl import create_window_and_renderer
from sdl import get_performance_counter
from sdl import get_performance_frequency
from sdl import img_init
from sdl import img_load
from sdl import mix_init
from sdl import open_audio
from sdl import poll_event
from sdl import sdl_init
from sdl import ttf_init
from sdl import volume_music

TITLE: string = "Mystris"

BLOCK_SIZE: i64 = 20

TETRO_SIZE: i64 = 4

FIELD_HEIGHT: i64 = 20

FIELD_WIDTH: i64 = 10

WIN_WIDTH: i64 = BLOCK_SIZE * FIELD_WIDTH * 3

WIN_HEIGHT: i64 = BLOCK_SIZE * FIELD_HEIGHT

MYS_LOGO_PATH: string = f"{__assets__}/images/mys-logo-30-25.png"

FONT_PATH: string = f"{__assets__}/fonts/RobotoMono-Regular.ttf"

FONT_SIZE: i64 = 24

MUSIC_PATH: string = f"{__assets__}/sounds/TwintrisThosenine.mod"

DROP_BLOCK_SOUND_PATH: string = f"{__assets__}/sounds/block.wav"

CLEAR_SOUND_PATH: string = f"{__assets__}/sounds/clear.wav"

AUDIO_BUFFER_SIZE: i64 = 1024

BACKGROUND_COLOR: Color = Color(0, 0, 0, 0)

FOREGROUND_COLOR: Color = Color(0, 170, 170, 0)

TETRO_COLORS: [Color] = [
    Color(0, 98, 192, 0),
    Color(202, 125, 95, 0),
    Color(0, 193, 191, 0),
    Color(0, 193, 0, 0),
    Color(191, 190, 0, 0),
    Color(209, 0, 191, 0),
    Color(209, 0, 0, 0)
]

TEXT_COLOR: Color = Color(255, 255, 255, 0)

@enum
class State:
    Running
    GameOver

class NesRandom:
    _previous_piece: i64

    def random(self) -> i64:
        piece = randint(0, 6)

        if piece == self._previous_piece:
            piece = randint(0, 6)

        self._previous_piece = piece

        return piece

class FrameTiming:
    ticks_per_frame: u64
    start_tick: u64

    def __init__(self):
        self.ticks_per_frame = get_performance_frequency() / 30

    def start(self):
        self.start_tick = get_performance_counter()

    def sleep_until_next_frame(self):
        frame_ticks = get_performance_counter() - self.start_tick

        if frame_ticks < self.ticks_per_frame:
            sleep_ticks = self.ticks_per_frame - frame_ticks
            sleep_time = f64(sleep_ticks) / f64(get_performance_frequency())
            sleep(sleep_time)

        self.start_tick = get_performance_counter()

class Block:
    x: i64
    y: i64

class Tetro:
    color_index: i64
    blocks: [[Block]]

TETROS: [Tetro] = [
    #  xxx
    #   x
    Tetro(0,
          [
              [Block(2, 1), Block(3, 1), Block(4, 1), Block(3, 2)],
              [Block(3, 0), Block(2, 1), Block(3, 1), Block(3, 2)],
              [Block(2, 1), Block(3, 1), Block(4, 1), Block(3, 0)],
              [Block(3, 0), Block(3, 1), Block(4, 1), Block(3, 2)]
          ]),
    #  xxx
    #    x
    Tetro(1,
          [
              [Block(2, 1), Block(3, 1), Block(4, 1), Block(4, 2)],
              [Block(3, 0), Block(3, 1), Block(2, 2), Block(3, 2)],
              [Block(2, 0), Block(2, 1), Block(3, 1), Block(4, 1)],
              [Block(3, 0), Block(4, 0), Block(3, 1), Block(3, 2)]
          ]),
    #  xx
    #   xx
    Tetro(2,
          [
              [Block(2, 1), Block(3, 1), Block(3, 2), Block(4, 2)],
              [Block(4, 0), Block(3, 1), Block(4, 1), Block(3, 2)],
              [Block(2, 1), Block(3, 1), Block(3, 2), Block(4, 2)],
              [Block(4, 0), Block(3, 1), Block(4, 1), Block(3, 2)]
          ]),
    #  xx
    #  xx
    Tetro(3,
          [
              [Block(2, 1), Block(3, 1), Block(2, 2), Block(3, 2)],
              [Block(2, 1), Block(3, 1), Block(2, 2), Block(3, 2)],
              [Block(2, 1), Block(3, 1), Block(2, 2), Block(3, 2)],
              [Block(2, 1), Block(3, 1), Block(2, 2), Block(3, 2)]
          ]),
    #   xx
    #  xx
    Tetro(4,
          [
              [Block(3, 1), Block(4, 1), Block(2, 2), Block(3, 2)],
              [Block(3, 0), Block(3, 1), Block(4, 1), Block(4, 2)],
              [Block(3, 1), Block(4, 1), Block(2, 2), Block(3, 2)],
              [Block(3, 0), Block(3, 1), Block(4, 1), Block(4, 2)]
          ]),
    #  xxx
    #  x
    Tetro(5,
          [
              [Block(2, 1), Block(3, 1), Block(4, 1), Block(2, 2)],
              [Block(2, 0), Block(3, 0), Block(3, 1), Block(3, 2)],
              [Block(4, 0), Block(2, 1), Block(3, 1), Block(4, 1)],
              [Block(3, 0), Block(3, 1), Block(3, 2), Block(4, 2)]
          ]),
    # xxxx
    Tetro(6,
          [
              [Block(1, 1), Block(2, 1), Block(3, 1), Block(4, 1)],
              [Block(3, -1), Block(3, 0), Block(3, 1), Block(3, 2)],
              [Block(1, 1), Block(2, 1), Block(3, 1), Block(4, 1)],
              [Block(3, -1), Block(3, 0), Block(3, 1), Block(3, 2)]
          ])
]

def create_empty_row() -> [i64]:
    row = [0 for _ in range(FIELD_WIDTH + 2)]
    row[0] = -1
    row[-1] = -1

    return row

def create_empty_field() -> [[i64]]:
    field = [create_empty_row() for _ in range(FIELD_HEIGHT + 4)]

    for i in range(FIELD_WIDTH + 2):
        field[0][i] = -1
        field[-1][i] = -1

    return field

class Game:
    width: i64
    height: i64
    screen: Surface
    texture: Texture
    mys_logo: Surface
    mys_logo_texture: Texture
    window: Window
    renderer: Renderer
    tetro_stats: [i64]
    key_fire: KeyCode
    state: State
    nes_random: NesRandom
    font: Font
    # field[y][x] contains the color of the block with (x,y) coordinates
    # "-1" border is to avoid bounds checking.
    # -1 -1 -1 -1
    # -1  0  0 -1
    # -1  0  0 -1
    # -1 -1 -1 -1
    field: [[i64]]
    # X offset of the game display
    x_offset: i64
    tetro: Tetro
    next_tetro_index: i64
    x_pos: i64
    y_pos: i64
    rotation_index: i64
    music: Music
    drop_block_sound: Wav
    clear_sound: Wav

    def __init__(self, width: i64, height: i64, title: string):
        self.width = width
        self.height = height
        self.tetro_stats = [0, 0, 0, 0, 0, 0, 0]
        self.window, self.renderer = create_window_and_renderer(width, height, 0)
        self.window.set_title(title)
        self.screen = create_rgb_surface(0,
                                         width,
                                         height,
                                         32,
                                         0x00ff0000,
                                         0x0000ff00,
                                         0x000000ff,
                                         0xff000000)
        self.texture = self.renderer.create_texture(width, height)
        self.setup_sound()
        self.mys_logo = img_load(MYS_LOGO_PATH)
        self.mys_logo_texture = self.renderer.create_texture_from_surface(self.mys_logo)
        self.key_fire = KeyCode.L
        self.state = State.Running
        self.nes_random = NesRandom()
        self.font = Font(FONT_PATH, FONT_SIZE)
        self.x_offset = FIELD_WIDTH * BLOCK_SIZE + 1
        self.next_tetro_index = self.nes_random.random()
        self.new_tetro()
        self.field = create_empty_field()

    def setup_sound(self):
        open_audio(48000, 2, AUDIO_BUFFER_SIZE)
        volume_music()
        self.music = Music(MUSIC_PATH)
        self.music.play(1)
        self.drop_block_sound = Wav(DROP_BLOCK_SOUND_PATH)
        self.clear_sound = Wav(CLEAR_SOUND_PATH)

    def run(self):
        frame_timing = FrameTiming()
        frame_timing.start()
        frame_counter = 0

        while True:
            frame_counter += 1

            if frame_counter % 30 == 0:
                self.move_tetro_down()

            self.draw()

            if not self.handle_events():
                break

            frame_timing.sleep_until_next_frame()

    def draw(self):
        self.renderer.clear()
        self.draw_background()
        self.draw_tetro()
        self.draw_field()
        self.draw_vertial_splitters()
        self.draw_stats_blocks()
        self.draw_next_tetro()
        self.draw_middle()
        self.draw_logo()
        self.draw_stats_text()
        self.draw_next_tetro_text()
        self.renderer.present()

    def draw_background(self):
        self.fill_rect(Rect(0, 0, self.width, self.height), BACKGROUND_COLOR)

    def draw_tetro(self):
        for block in self.tetro.blocks[self.rotation_index]:
            self.draw_block(self.x_pos + block.x,
                            self.y_pos + block.y,
                            self.tetro.color_index,
                            self.x_offset)

    def draw_field(self):
        for y in range(3, FIELD_HEIGHT + 3):
            for x in range(1, FIELD_WIDTH + 1):
                row = self.field[y]

                if row[x] > 0:
                    self.draw_block(x, y, row[x] - 1, self.x_offset)

    def draw_block(self, x: i64, y: i64, color_index: i64, x_offset: i64):
        rect = Rect(x_offset + (x - 1) * BLOCK_SIZE,
                    (y - 3) * BLOCK_SIZE,
                    BLOCK_SIZE - 1,
                    BLOCK_SIZE - 1)
        self.fill_rect(rect, TETRO_COLORS[color_index])

    def draw_vertial_splitters(self):
        rect = Rect(BLOCK_SIZE * FIELD_WIDTH - 2, 0, 2, self.height)
        self.fill_rect(rect, FOREGROUND_COLOR)
        rect.x = WIN_WIDTH - BLOCK_SIZE * FIELD_WIDTH + 1
        self.fill_rect(rect, FOREGROUND_COLOR)

    def draw_stats_blocks(self):
        for i, stat in enumerate(self.tetro_stats):
            tetro = TETROS[i]

            for block in tetro.blocks[0]:
                x = (block.x + 1) * BLOCK_SIZE
                y = i * (5 * BLOCK_SIZE / 2) + (block.y + 1) * BLOCK_SIZE
                rect = Rect(x, y, BLOCK_SIZE - 1, BLOCK_SIZE - 1)
                self.fill_rect(rect, TETRO_COLORS[tetro.color_index])

    def draw_stats_text(self):
        self.draw_text(BLOCK_SIZE, 0, "STATISTICS", TEXT_COLOR)

        for i, stat in enumerate(self.tetro_stats):
            y = (i + 1) * (5 * BLOCK_SIZE / 2) - FONT_SIZE / 2
            self.draw_text(BLOCK_SIZE * 7, y, str(self.tetro_stats[i]), TEXT_COLOR)

    def draw_next_tetro(self):
        tetro = TETROS[self.next_tetro_index]

        for block in tetro.blocks[0]:
            x = (block.x + 22) * BLOCK_SIZE
            y = (5 * BLOCK_SIZE / 2) + (block.y + 6) * BLOCK_SIZE
            rect = Rect(x, y, BLOCK_SIZE - 1, BLOCK_SIZE - 1)
            self.fill_rect(rect, TETRO_COLORS[tetro.color_index])

    def draw_next_tetro_text(self):
        self.draw_text(BLOCK_SIZE * 23, BLOCK_SIZE * 7, "NEXT", TEXT_COLOR)

    def draw_middle(self):
        self.texture.update(self.screen)
        self.renderer.copy(self.texture, None)

    def draw_logo(self):
        tw, th = self.mys_logo_texture.query()
        self.renderer.copy(self.mys_logo_texture,
                           Rect(5 * (WIN_WIDTH - tw / 2) / 6, 20, tw, th))

    def draw_text(self, x: i64, y: i64, text: string, color: Color):
        surface = self.font.render_solid(text, color)
        texture = self.renderer.create_texture_from_surface(surface)
        width, height = texture.query()
        self.renderer.copy(texture, Rect(x, y, width, height))

    def handle_events(self) -> bool:
        running = True

        while True:
            match poll_event():
                case QuitEvent():
                    running = False
                case KeyDownEvent() as event:
                    self.handle_key(event.keysym.sym)
                case _:
                    break

        return running

    def handle_key(self, key: KeyCode):
        if key == KeyCode.Space:
            self.handle_key_space()
        elif key == self.key_fire:
            self.handle_key_fire()

        if self.state != State.Running:
            return

        if key == KeyCode.Z:
            self.rotate_tetro(-1)
        elif key == KeyCode.X:
            self.rotate_tetro(1)
        elif key == KeyCode.Left:
            self.move_tetro_left()
        elif key == KeyCode.Right:
            self.move_tetro_right()
        elif key == KeyCode.Down:
            self.move_tetro_down()

    def handle_key_space(self):
        print("handle_key_space")

    def handle_key_fire(self):
        print("handle_key_fire")

    def rotate_tetro(self, step: i64):
        rotation_index = self.rotation_index
        self.rotation_index += step
        self.rotation_index %= TETRO_SIZE

        if not self.move_tetro_side(0):
            self.rotation_index = rotation_index

    def move_tetro_left(self):
        self.move_tetro_side(-1)

    def move_tetro_right(self):
        self.move_tetro_side(1)

    def move_tetro_side(self, dx: i64) -> bool:
        # Reached left/right edge or another tetro?
        for block in self.tetro.blocks[self.rotation_index]:
            x = block.x + self.x_pos + dx
            row = self.field[block.y + self.y_pos]

            if row[x] != 0:
                # Do not move
                return False

        self.x_pos += dx

        return True

    def move_tetro_down(self):
        for block in self.tetro.blocks[self.rotation_index]:
            y = block.y + self.y_pos + 1
            x = block.x + self.x_pos
            # Reached the bottom of the screen or another block?
            row = self.field[y]

            if row[x] != 0:
                if self.y_pos < 3:
                    # The new tetro has no space to drop => end of the game
                    self.state = State.GameOver
                else:
                    # Drop it and generate a new one
                    self.drop_tetro()
                    self.new_tetro()

                    if not self.delete_cleared_lines():
                        self.drop_block_sound.play(0, 0)

                return

        self.y_pos += 1

    def new_tetro(self):
        self.x_pos = FIELD_WIDTH / 2 - TETRO_SIZE / 2
        self.y_pos = 2
        self.tetro = TETROS[self.next_tetro_index]
        self.rotation_index = 0
        self.tetro_stats[self.next_tetro_index] += 1
        self.next_tetro_index = self.nes_random.random()

    def drop_tetro(self):
        for block in self.tetro.blocks[self.rotation_index]:
            x = block.x + self.x_pos
            y = block.y + self.y_pos
            row = self.field[y]
            row[x] = self.tetro.color_index + 1

    def fill_rect(self, rect: Rect, color: Color):
        value = self.screen.map_rgb(color.r, color.g, color.b)
        self.screen.fill_rect(rect, value)

    def delete_cleared_lines(self) -> bool:
        number_of_cleared_lines = 0

        for y in range(2, FIELD_HEIGHT + 3):
            if self.delete_cleared_line(y):
                number_of_cleared_lines += 1

        if number_of_cleared_lines > 0:
            self.clear_sound.play(0, 0)

        return number_of_cleared_lines > 0

    def delete_cleared_line(self, y: i64) -> bool:
        for v in slice(self.field[y], 1, -1):
            if v == 0:
                return False

        for yp in range(y, 2, -1):
            self.field[yp] = self.field[yp - 1]

        self.field[2] = create_empty_row()

        return True

def main():
    print("Mystris -- tribute to venerable Twintris")
    sdl_init()
    ttf_init()
    img_init()
    mix_init()
    game = Game(WIN_WIDTH, WIN_HEIGHT, TITLE)
    game.run()
