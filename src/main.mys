from fiber import sleep
from random.pseudo import randint
from . import sdl_init
from . import ttf_init
from . import create_window_and_renderer
from . import create_rgb_surface
from . import img_init
from . import img_load
from . import Window
from . import Renderer
from . import Surface
from . import Texture
from . import Rect
from . import Color

TITLE: string = "tVintris"
BLOCK_SIZE: i64 = 20
FIELD_HEIGHT: i64 = 20
FIELD_WIDTH: i64 = 10
WIN_WIDTH: i64 = BLOCK_SIZE * FIELD_WIDTH * 3
WIN_HEIGHT: i64 = BLOCK_SIZE * FIELD_HEIGHT
MYS_LOGO: string = "images/mys-logo-30-25.png"

FOREGROUND_COLOR: Color = Color(0, 170, 170, 0)
COLORS: [Color] = [
    Color(0, 0, 0, 0),
    Color(0, 98, 192, 0),
    Color(202, 125, 95, 0),
    Color(0, 193, 191, 0),
    Color(0, 193, 0, 0),
    Color(191, 190, 0, 0),
    Color(209, 0, 191, 0),
    Color(209, 0, 0, 0),
    Color(0, 170, 170, 0)
]

class Game:
    width: i64
    height: i64
    screen: Surface
    texture: Texture
    mys_logo: Surface
    tmys_logo: Texture
    window: Window
    renderer: Renderer
    tetro_stats: [i64]
    tetro_total: i64

    def __init__(self, width: i64, height: i64, title: string):
        self.width = width
        self.height = height
        self.tetro_total = 0
        self.tetro_stats = [0, 0, 0, 0, 0, 0, 0]
        self.window, self.renderer = create_window_and_renderer(width, height, 0)
        self.window.set_title(title)
        self.screen = create_rgb_surface(0,
                                         width,
                                         height,
                                         32,
                                         0x00ff0000,
                                         0x0000ff00,
                                         0x000000ff,
                                         0xff000000)
        self.texture = self.renderer.create_texture(width, height)
        self.mys_logo = img_load(MYS_LOGO)
        self.tmys_logo = self.renderer.create_texture_from_surface(self.mys_logo)

    def run(self):
        while True:
            # Just some dummy stats. Remove later.
            self.tetro_total += 1
            self.tetro_stats[randint(0, 6)] += 1

            self.renderer.clear()
            self.draw_background()
            self.draw_vertial_splitters()
            self.draw_stats()
            self.draw_middle()
            self.draw_logo()
            self.renderer.present()

            sleep(0.5)

    def fill_rect(self, rect: Rect, color: Color):
        value = self.screen.map_rgb(color.r, color.g, color.b)
        self.screen.fill_rect(rect, value)

    def draw_background(self):
        rect = Rect(0, 0, self.width, self.height)
        color = Color(0, 0, 0, 0)
        self.fill_rect(rect, color)

    def draw_vertial_splitters(self):
        rect = Rect(BLOCK_SIZE * FIELD_WIDTH + 2, 0, 2, self.height)
        self.fill_rect(rect, FOREGROUND_COLOR)

        rect = Rect(WIN_WIDTH - BLOCK_SIZE * FIELD_WIDTH - 4, 0, 2, self.height)
        self.fill_rect(rect, FOREGROUND_COLOR)

    def draw_stats(self):
        for i, stat in enumerate(self.tetro_stats):
            s = 10

            if self.tetro_total > 0:
                s += 90 * stat / self.tetro_total

            width = BLOCK_SIZE
            height = s * 4 * width / 100
            rect = Rect((WIN_WIDTH - 7 * (width + 1)) / 2 + i * (width + 1),
                        WIN_HEIGHT * 3 / 4 - height,
                        width,
                        height)
            self.fill_rect(rect, COLORS[i + 1])

    def draw_middle(self):
        self.texture.update(self.screen)
        self.renderer.copy(self.texture, None)

    def draw_logo(self):
        tw, th = self.tmys_logo.query()
        self.renderer.copy(self.tmys_logo, Rect((WIN_WIDTH - tw) / 2, 20, tw, th))

def main():
    print("tVintris -- tribute to venerable Twintris")
    sdl_init()
    ttf_init()
    img_init()
    game = Game(WIN_WIDTH, WIN_HEIGHT, TITLE)
    game.run()
