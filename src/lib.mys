"""mys-embedded-c++-before-namespace
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <SDL2/SDL_image.h>
"""

class Rect:
    x: i64
    y: i64
    w: i64
    h: i64

class Color:
    r: u8
    g: u8
    b: u8
    a: u8

class SdlError(Error):
    message: string

class Window:
    c"""
    void *window_p;
    """

    title: bytes

    def __init__(self):
        pass

    def set_title(self, title: string):
        self.title = title.to_utf8()
        self.title += 0

        c"""
        SDL_SetWindowTitle((SDL_Window *)this->window_p,
                           (const char *)this->title.m_bytes->data());
        """

class Renderer:
    c"""
    void *renderer_p;
    """

    def create_texture(self, width: i64, height: i64) -> Texture:
        texture = Texture()
        res: i64 = 0

        c"""
        texture->texture_p = SDL_CreateTexture((SDL_Renderer *)this->renderer_p,
                                               SDL_PIXELFORMAT_ARGB8888,
                                               SDL_TEXTUREACCESS_STREAMING,
                                               width,
                                               height);

        if (texture->texture_p == NULL) {
            res = 1;
        }
        """

        if res != 0:
            raise SdlError("create_texture()")

        return texture

    # ToDo: missing return value does not work.
    def create_texture_from_surface(self, surface: Surface) -> Texture:
        texture = Texture()
        res: i64 = 0

        c"""
        texture->texture_p = SDL_CreateTextureFromSurface(
            (SDL_Renderer *)this->renderer_p,
            (SDL_Surface *)surface->surface_p);

        if (texture->texture_p == NULL) {
            res = 1;
        }
        """

        if res != 0:
            raise SdlError("create_texture_from_surface()")

        return texture

    def clear(self):
        c"""
        SDL_RenderClear((SDL_Renderer *)this->renderer_p);
        """

    def copy(self, texture: Texture, dst_rect: Rect):
        c"""
        SDL_Rect dstrect;
        SDL_Rect *dstrect_p = NULL;

        if (dst_rect) {
            dstrect.x = dst_rect->x;
            dstrect.y = dst_rect->y;
            dstrect.w = dst_rect->w;
            dstrect.h = dst_rect->h;
            dstrect_p = &dstrect;
        }
        SDL_RenderCopy((SDL_Renderer *)this->renderer_p,
                       (SDL_Texture *)texture->texture_p,
                       NULL,
                       dstrect_p);
        """

    def present(self):
        c"""
        SDL_RenderPresent((SDL_Renderer *)this->renderer_p);
        """

class Surface:
    c"""
    void *surface_p;
    """

    def map_rgb(self, r: u8, g: u8, b: u8) -> u32:
        res: u32 = 0

        c"""
        res = SDL_MapRGB(((SDL_Surface *)this->surface_p)->format, r, g, b);
        """

        return res

    def fill_rect(self, rect: Rect, color: u32):
        c"""
        SDL_Rect c_rect;
        c_rect.x = rect->x;
        c_rect.y = rect->y;
        c_rect.w = rect->w;
        c_rect.h = rect->h;
        SDL_FillRect((SDL_Surface *)this->surface_p, &c_rect, color);
        """

class Texture:
    c"""
    void *texture_p;
    """

    def query(self) -> (i64, i64):
        width: i64 = 0
        height: i64 = 0

        c"""
        int w;
        int h;
        SDL_QueryTexture((SDL_Texture *)this->texture_p, NULL, NULL, &w, &h);
        width = w;
        height = h;
        """

        return (width, height)

    def update(self, surface: Surface):
        c"""
        SDL_Surface *surface_p = (SDL_Surface *)surface->surface_p;
        SDL_UpdateTexture((SDL_Texture *)this->texture_p,
                           NULL,
                           surface_p->pixels,
                           surface_p->pitch);
        """

def sdl_init():
    res: i64 = 0

    c"""
    res = SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_JOYSTICK);
    """

    if res != 0:
        raise SdlError("sdl_init()")

def ttf_init():
    c"""
    TTF_Init();
    """

def create_window_and_renderer(width: i64,
                               height: i64,
                               flags: u32) -> (Window, Renderer):
    window = Window()
    renderer = Renderer()
    res: i64 = 0

    c"""
    res = SDL_CreateWindowAndRenderer(width,
                                      height,
                                      flags,
                                      (SDL_Window **)&window->window_p,
                                      (SDL_Renderer **)&renderer->renderer_p);
    """

    if res != 0:
        raise SdlError("create_window_and_renderer()")

    return window, renderer

def create_rgb_surface(flags: u32,
                       width: i64,
                       height: i64,
                       bpp: i64,
                       rmask: u32,
                       gmask: u32,
                       bmask: u32,
                       amask: u32) -> Surface:
    surface = Surface()
    res: i64 = 0

    c"""
    surface->surface_p = SDL_CreateRGBSurface(flags,
                                              width,
                                              height,
                                              bpp,
                                              rmask,
                                              gmask,
                                              bmask,
                                              amask);

    if (surface->surface_p == NULL) {
        res = 1;
    }
    """

    if res != 0:
        raise SdlError("create_rgb_surface()")

    return surface

def img_init():
    res: i64 = 0

    c"""
    if (IMG_Init(IMG_INIT_PNG) != IMG_INIT_PNG) {
        res = 1;
    }
    """

    if res != 0:
        raise SdlError("img_init()")

def img_load(path: string) -> Surface:
    surface = Surface()
    res: i64 = 0
    path_bytes = path.to_utf8()
    path_bytes += 0

    c"""
    surface->surface_p = IMG_Load((const char *)path_bytes.m_bytes->data());

    if (surface->surface_p == NULL) {
        res = 1;
    }
    """

    if res != 0:
        raise SdlError("img_load()")

    return surface

@trait
class Event:
    pass

class QuitEvent(Event):
    pass

class KeyDownEvent(Event):
    keysym: KeySym

class KeySym:
    sym: KeyCode

def poll_event() -> Event:
    return QuitEvent()

@enum
class KeyCode:
    Space
    Up
    Left
    Right
    Down
    L

def get_performance_counter() -> u64:
    count: u64 = 0

    c"""
    count = SDL_GetPerformanceCounter();
    """

    return count

def get_performance_frequency() -> u64:
    frequency: u64 = 0

    c"""
    frequency = SDL_GetPerformanceFrequency();
    """

    return frequency
